from sqlalchemy import and_, func, join, select
from sqlalchemy_utils.view import create_view

from vigorish.database import Assoc_Player_Team, Base, PitchStats
from vigorish.models.views.pitch_stats_col_expressions import (
    bb_per_nine,
    bb_rate,
    era,
    hr_per_fb,
    hr_per_nine,
    innings_pitched,
    k_minus_bb,
    k_per_bb,
    k_per_nine,
    k_rate,
    whip,
)


class Player_PitchStats_All_View(Base):
    __table__ = create_view(
        name="player_pitchstats_all",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .select_from(PitchStats)
        .group_by(PitchStats.player_id)
        .order_by(PitchStats.player_id_mlb),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )


class Player_PitchStats_SP_View(Base):
    __table__ = create_view(
        name="player_pitchstats_sp",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                func.avg(PitchStats.game_score).label("avg_game_score"),
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .where(PitchStats.is_sp == 1)
        .select_from(PitchStats)
        .group_by(PitchStats.player_id)
        .order_by(PitchStats.player_id_mlb),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )


class Player_PitchStats_RP_View(Base):
    __table__ = create_view(
        name="player_pitchstats_rp",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .where(PitchStats.is_rp == 1)
        .select_from(PitchStats)
        .group_by(PitchStats.player_id)
        .order_by(PitchStats.player_id_mlb),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )


class Player_PitchStats_By_Year_View(Base):
    __table__ = create_view(
        name="player_pitchstats_by_year",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                PitchStats.season_id.label("season_id"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .select_from(PitchStats)
        .group_by(PitchStats.season_id)
        .group_by(PitchStats.player_id)
        .order_by(PitchStats.player_id_mlb),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )


class Player_PitchStats_By_Team_View(Base):
    __table__ = create_view(
        name="player_pitchstats_by_team",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                PitchStats.player_team_id_bbref.label("player_team_id_bbref"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .select_from(PitchStats)
        .group_by(PitchStats.player_id)
        .group_by(PitchStats.player_team_id_bbref)
        .order_by(PitchStats.player_id_mlb),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )


class Player_PitchStats_By_Team_Year_View(Base):
    __table__ = create_view(
        name="player_pitchstats_by_team_year",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                PitchStats.season_id.label("season_id"),
                PitchStats.player_team_id.label("player_team_id"),
                PitchStats.player_team_id_bbref.label("player_team_id_bbref"),
                Assoc_Player_Team.stint_number.label("stint_number"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .select_from(
            join(
                PitchStats,
                Assoc_Player_Team,
                and_(
                    PitchStats.player_id == Assoc_Player_Team.db_player_id,
                    PitchStats.player_team_id == Assoc_Player_Team.db_team_id,
                ),
            )
        )
        .group_by(PitchStats.season_id)
        .group_by(PitchStats.player_id)
        .group_by(PitchStats.player_team_id)
        .order_by(PitchStats.player_id_mlb)
        .order_by(PitchStats.season_id)
        .order_by(Assoc_Player_Team.stint_number),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )


class Player_PitchStats_By_Opp_Team_View(Base):
    __table__ = create_view(
        name="player_pitchstats_by_opp_team",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                PitchStats.opponent_team_id_bbref.label("opponent_team_id_bbref"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .select_from(PitchStats)
        .group_by(PitchStats.player_id)
        .group_by(PitchStats.opponent_team_id_bbref)
        .order_by(PitchStats.player_id_mlb),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )


class Player_PitchStats_By_Opp_Team_Year_View(Base):
    __table__ = create_view(
        name="player_pitchstats_by_opp_team_year",
        selectable=select(
            [
                PitchStats.player_id.label("id"),
                PitchStats.player_id_mlb.label("mlb_id"),
                PitchStats.player_id_bbref.label("bbref_id"),
                PitchStats.season_id.label("season_id"),
                PitchStats.opponent_team_id.label("opponent_team_id"),
                PitchStats.opponent_team_id_bbref.label("opponent_team_id_bbref"),
                func.count(PitchStats.id).label("total_games"),
                func.sum(PitchStats.is_sp).label("games_as_sp"),
                func.sum(PitchStats.is_rp).label("games_as_rp"),
                func.sum(PitchStats.is_wp).label("wins"),
                func.sum(PitchStats.is_lp).label("losses"),
                func.sum(PitchStats.is_sv).label("saves"),
                innings_pitched,
                func.sum(PitchStats.total_outs).label("total_outs"),
                func.sum(PitchStats.batters_faced).label("batters_faced"),
                func.sum(PitchStats.runs).label("runs"),
                func.sum(PitchStats.earned_runs).label("earned_runs"),
                func.sum(PitchStats.hits).label("hits"),
                func.sum(PitchStats.homeruns).label("homeruns"),
                func.sum(PitchStats.strikeouts).label("strikeouts"),
                func.sum(PitchStats.bases_on_balls).label("bases_on_balls"),
                era,
                whip,
                k_per_nine,
                bb_per_nine,
                hr_per_nine,
                k_per_bb,
                k_rate,
                bb_rate,
                k_minus_bb,
                hr_per_fb,
                func.sum(PitchStats.pitch_count).label("pitch_count"),
                func.sum(PitchStats.strikes).label("strikes"),
                func.sum(PitchStats.strikes_contact).label("strikes_contact"),
                func.sum(PitchStats.strikes_swinging).label("strikes_swinging"),
                func.sum(PitchStats.strikes_looking).label("strikes_looking"),
                func.sum(PitchStats.ground_balls).label("ground_balls"),
                func.sum(PitchStats.fly_balls).label("fly_balls"),
                func.sum(PitchStats.line_drives).label("line_drives"),
                func.sum(PitchStats.unknown_type).label("unknown_type"),
                func.sum(PitchStats.inherited_runners).label("inherited_runners"),
                func.sum(PitchStats.inherited_scored).label("inherited_scored"),
                func.sum(PitchStats.wpa_pitch).label("wpa_pitch"),
                func.sum(PitchStats.re24_pitch).label("re24_pitch"),
            ]
        )
        .select_from(PitchStats)
        .group_by(PitchStats.season_id)
        .group_by(PitchStats.player_id)
        .group_by(PitchStats.opponent_team_id)
        .order_by(PitchStats.player_id_mlb),
        metadata=Base.metadata,
        cascade_on_drop=False,
    )
